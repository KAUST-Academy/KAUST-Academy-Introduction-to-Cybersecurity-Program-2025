# -*- coding: utf-8 -*-
"""Stegno.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YxPk-LrWTHdCp17ZE9F5OhomZarZf90T
"""

from PIL import Image

def text_to_binary(text):
    """Convert text to a binary string."""
    return ''.join(format(ord(char), '08b') for char in text) + '1111111111111110'  # End delimiter

def binary_to_text(binary):
    """Convert binary string to text."""
    chars = [binary[i:i+8] for i in range(0, len(binary), 8)]
    return ''.join(chr(int(char, 2)) for char in chars if char != '11111111')

def hide_message(image_path, output_path, message):
    """Hide a message inside an image using LSB steganography."""
    img = Image.open(image_path).convert("RGB")  # Ensure RGB mode
    pixels = img.load()

    binary_message = text_to_binary(message)
    index = 0

    for y in range(img.height):
        for x in range(img.width):
            if index < len(binary_message):
                r, g, b = pixels[x, y]
                r = (r & ~1) | int(binary_message[index])  # Modify LSB of red channel
                pixels[x, y] = (r, g, b)
                index += 1
            else:
                break
        if index >= len(binary_message):
            break

    output_file = f"{output_path}/stego_image.png"
    img.save(output_file)
    print(f"Message hidden in {output_file}")

def extract_message(image_path):
    """Extract a hidden message from an image."""
    img = Image.open(image_path).convert("RGB")
    pixels = img.load()

    binary_message = ""

    for y in range(img.height):
        for x in range(img.width):
            r, g, b = pixels[x, y]
            binary_message += str(r & 1)  # Get LSB of red channel

    end_marker = "1111111111111110"  # End delimiter
    if end_marker in binary_message:
        binary_message = binary_message[:binary_message.index(end_marker)]

    return binary_to_text(binary_message)

def main():
    """Main function to run the steganography program."""
    choice = input("Do you want to (H)ide or (E)xtract a message? ").strip().lower()

    if choice == 'h':
        image_path = input("Enter the path to the input image: ").strip()
        output_path = input("Enter the path to save the output image: ").strip()
        message = input("Enter the message to hide: ").strip()
        hide_message(image_path, output_path, message)

    elif choice == 'e':
        image_path = input("Enter the path to the stego image: ").strip()
        extracted_message = extract_message(image_path)
        print(f"Extracted message: {extracted_message}")

    else:
        print("Invalid choice. Please enter 'H' to hide or 'E' to extract.")

# Run the program
if __name__ == "__main__":
    main()